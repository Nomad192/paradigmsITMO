(defn t [f a b]
				(if (double?  a) 
								(f a b)
								(mapv (partial t f) a b)))
(defn v+ [a b] (t + a b))
(defn v- [a b] (t - a b))
(defn v* [a b] (t * a b))
(defn vd [a b] (t / a b))
(defn v*s [a b] (mapv (partial * b) a))
(defn scalar [a b] (apply + (mapv * a b)))
(defn vect [a b] [(- (* (nth a 1) (nth b 2)) (* (nth a 2) (nth b 1))) 
																	 (- (* (nth a 2) (nth b 0)) (* (nth a 0) (nth b 2)))
																		(- (* (nth a 0) (nth b 1)) (* (nth a 1) (nth b 0)))])
(def m+ v+)
(def m- v-)
(def m* v*)
(def md vd)
(def c+ v+)
(def c- v-)
(def c* v*)
(def cd vd)
(defn m*s [a b] (mapv v*s a (iterate identity b)))
(defn m*v [a b] (mapv (partial scalar b) a))
(defn transpose [a] (apply mapv vector a))
(defn m*m [a b] (mapv 
																(partial 
																				(fn [b a] (mapv (partial scalar a) b)) 
																				(transpose b))
 															a))